#include <iostream>
#include <string>
#include <stack>
#define ull unsigned long long
#define ll long long
#define Z 100000005
#define FOR(P,Q) for(P=0;P<Q;P++)
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
using namespace std;
string s;
char heap[Z];
int i,cnt;
stack <char> op,ans,in;

void postfix(string s)
{
	int flag = 0;
	for (int i = 0; i < s.size(); ++i)
	{
		if(!(s[i] > 96 and s[i] < 123) or s[i] == 'V')
		{
			op.push(s[i]);
			if(s[i] == '~')
				flag++;
			else flag = 0;
			if(op.top() == ')')
			{
				op.pop();
				while(op.top() != '(')
				{
					if(op.top() != ')' and op.top() != '~')
						ans.push(op.top());
					op.pop();
				}
				op.pop();
				while(!op.empty() and (op.top() == '~'))
					ans.push(op.top()),op.pop();
				continue;
			}
		}
		else
		{
			ans.push(s[i]);
			if(flag >= 1)
				while(flag--)
					ans.push(op.top()),op.pop();
		}
	}
	while(!op.empty())
	{
		ans.push(op.top());
		op.pop();
	}
}

void tree(stack <char> st) {
	int mk = 0;
	stack <int> sym;
	while(!st.empty()) {
		char c = st.top();
		st.pop();
		heap[mk] = c;
		//cout << c;

		//if symbol encountered, go to right node
		if(c == '>' or c == '^' or c == 'V') {
			//cout<<mk<<endl;
			sym.push(mk);
			mk = (2*mk) + 2;
		}

		// if negation symbol, put 0 in left node and go to right node
		else if (c == '~') {
			//cout<<mk<<endl;
			//heap[2*(mk) + 1] = 0;
			mk = 2*mk + 2;
		}

		else {
			//right node (even number) finished, go to left
			if(mk%2 == 0) {
				//cout<<mk<<endl;
				mk--;
				//check if the left node is 0
				if(heap[mk] == 0 && !sym.empty()) {
					mk = 2*(sym.top()) + 1;
				}

				else {
					//cout<<mk<<endl;
					return;
				}
				sym.pop();
			}

			//left node is done, go to left node of previously unfilled
			else {
					if(!sym.empty()) {
						//cout<<mk<<endl;
						mk = 2*(sym.top()) + 1;
						sym.pop();
					}

					else {
						//cout<<mk<<endl;
						return;
					}
			}
		}
	}

	cout<<'\n';
}

void infix(int i, char Arr[], int N)
{
    if(Arr[i] == 0)
        return;
    if(Arr[(2*i)+1] == 0 && Arr[(2*i)+2] == 0)
    {
        printf("%c", Arr[i]);
        return;
    }
    else
    {
        if(Arr[(2*i)+1] != 0)
            {
                if(Arr[i] == 'V' || Arr[i] == '^' || Arr[i] == '>')
                    if(Arr[(2*i)+1] == 'V' || Arr[(2*i)+1] == '^' || Arr[(2*i)+1] == '>')
                        printf("(");
                infix((2*i)+1, Arr, N);
            }

        if(Arr[i] == 'V' || Arr[i] == '^' || Arr[i] == '>')
            if(Arr[(2*i)+1] == 'V' || Arr[(2*i)+1] == '^' || Arr[(2*i)+1] == '>')
                printf(")");

        printf("%c", Arr[i]);
        if(Arr[i] == '~')
            if(Arr[2*i+2] == 'V' || Arr[2*i+2] == '^' || Arr[2*i+2] == '>' || Arr[2*i+2] == '~')
                printf("%c", '(');

        if(Arr[(i*2)+2] != 0)
        {
            if(Arr[i] == 'V' || Arr[i] == '^' || Arr[i] == '>')
                if(Arr[(2*i)+2] == 'V' || Arr[(2*i)+2] == '^' || Arr[(2*i)+2] == '>')
                    printf("(");
            infix((2*i)+2, Arr, N);
        }

        if(Arr[i] == 'V' || Arr[i] == '^' || Arr[i] == '>')
            if(Arr[(2*i)+2] == 'V' || Arr[(2*i)+2] == '^' || Arr[(2*i)+2] == '>')
                printf(")");

        if(Arr[i] == '~')
            if(Arr[2*i+2] == 'V' || Arr[2*i+2] == '^' || Arr[2*i+2] == '>' || Arr[2*i+2] == '~')
                printf("%c", ')');
    }
}

int main()
{
	IOS;
	ll n,k,a,b,flag = 0;
	cin>>s;

	// while(!ans.empty())
	// 	in.push(ans.top()),ans.pop();
	// while(!in.empty())
	// 	cout<<in.top(),in.pop();
	postfix(s);
	tree(ans);
	// cout<<"check"<<endl;
	infix(0, heap, cnt);
    return 0;
}
